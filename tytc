# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

#!/bin/bash
USER_AGENT="Definitely a real web browser"

PAGE_LENGTH=50

HTML=""
ID_LENGTH=11
CHANNEL_ID_LENGTH=24

getData() {
	ID="No IDs found"
	TITLE="No titles found"
	STRING_REGEX="((?<![\\\\])\")((?:.(?!(?<![\\\\])\1))*.?)\""
	#https://www.metaltoad.com/blog/regex-quoted-string-escapable-quotes
	if [[ "$1" =~ ^https://www.youtube.com/?$ ]]
	then
		DATA_RAW=$(echo "$HTML" | grep -Po "{\"videoId\":$STRING_REGEX,.*?\"text\":$STRING_REGEX" | cut -b 13- | uniq -w 11)
		#includes the name of the video and the id
		ID=$(echo "$DATA_RAW" | cut -b 1-11)
		TITLE=$(echo "$DATA_RAW" | grep -Po "$STRING_REGEX$" | cut -b 2- | sed 's/.$//')
	elif [[ "$1" =~ ^https://www.youtube.com/watch\?v=[a-zA-Z0-9_-]{11}/?$ ]]
	then
		DATA_RAW=$(echo "$HTML" | grep -Po "\"simpleText\":$STRING_REGEX},\"(short|long)BylineText\":.*?\"videoId\":\"[a-zA-Z0-9_-]{11}\"")
		#includes the name of the video and the id
		ID=$(echo "$DATA_RAW" | grep -Po "\"videoId\":\"[a-zA-Z0-9_-]{11}\"" | cut -b 12-22)
		TITLE=$(echo "$DATA_RAW" | grep -Po "^\"simpleText\":$STRING_REGEX" | cut -b 15- | sed 's/.$//');
	elif [[ $1 =~ ^https://www.youtube.com/results\?search_query=.*/?$ ]]
	then
		DATA_RAW=$(echo "$HTML" | grep -Po "\"videoId\":$STRING_REGEX,\"thumbnail\".*?\"text\":$STRING_REGEX" | cut -b 12-)
		ID=$(echo "$DATA_RAW" | cut -b 1-11)
		TITLE=$(echo "$DATA_RAW" | grep -Po "$STRING_REGEX$" | cut -b 2- | sed 's/.$//')
	elif [[ $1 =~ ^https://www.youtube.com/playlist ]]
	then
		DATA_RAW=$(youtube-dl --flat-playlist --dump-json $1)
		ID=$(echo "$DATA_RAW" | grep -Po "\"id\": \"[a-zA-Z0-9_-]{11}\"" | cut -b 8-18)
		TITLE=$(echo "$DATA_RAW" | grep -Po "\"title\": $STRING_REGEX" | cut -b 11- | sed "s/.$//")
	fi
	#This could probably be done with a case statement but the second regex would be massive.

	paste <(echo "$ID") <(echo "$TITLE") "-d " | uniq -u
}
#getData reads from HTML and outputs all the related videos (or front page videos in the case of https://www.youtube.com/) in this form:
#[11 characters for the id of the video] [the title of the video]
#[11 characters for the next video id  ] [the title of the next video]
#...
#It does read from a global variable, which is awful practice, but I don't know enough bash to not have that without having to recurl getChannelCreator.
#I did also use the magic number of 11 as the id length, but that's youtube specific so it's fine.
#The other functions which don't use scraping don't use magic numbers.

getChannelCreator() {
	STRING_REGEX="((?<![\\\\])\")((?:.(?!(?<![\\\\])\1))*.?)\""
	if [[ "$1" =~ ^https://www.youtube.com/watch\?v=[a-zA-Z0-9_-]{11}/?$ ]]
	then DATA_RAW=$(echo "$HTML" | grep -Po "\"channelId\":$STRING_REGEX,\"isOwnerViewing\":.*?\"author\":$STRING_REGEX")
		#includes the name of the video and the id
		CHANNEL_NAME=$(echo "$DATA_RAW" | grep -Po "^\"channelId\":$STRING_REGEX" | cut -b 14- | sed "s/.$//")
		CHANNEL_ID=$(echo "$DATA_RAW" | grep -Po "\"author\":$STRING_REGEX$" | cut -b 11- | sed "s/.$//")
		echo "$CHANNEL_NAME$CHANNEL_ID"
	fi
}

viewThumbnail() { feh "https://i.ytimg.com/vi/$1/maxresdefault.jpg" feh "https://i.ytimg.com/vi/$1/mqdefault.jpg" feh "https://i.ytimg.com/vi/$1/default.jpg"; }

urlFromId() { echo "https://www.youtube.com/watch?v=$1"; }
urlFromChannelId() {
	CHANNEL_ID="UU$(echo "$1" | cut -b 3-)"
	#The play all feature in youtube generates a playlist with the following format:
	#https:///www.youtube.com/playlist?list=UU{CHANNEL_ID]}
	#where CHANNEL_ID has the first 2 characters, which are always UC, removed. This new CHANNEL_ID is really just the modified channel ID for the link.
	echo "https://www.youtube.com/playlist?list=$CHANNEL_ID"
}





#All youtube specific things happen before here.





viewVideo() { mpv "$1" --ytdl-raw-options-add=user-agent=$USER_AGENT; }

calc() { awk "BEGIN { print "$*" }"; }
#https://stackoverflow.com/questions/18093871/how-can-i-do-division-with-variables-in-a-linux-shell

selectItem() {
	read LINE
	LINE=$(echo "$LINE" | grep -Po "^[0-9]+$")
	if [[ -z "$LINE" ]]
	then
		echo ""
	else
		echo "$1" | sed "${LINE}q;d"
	fi
}

displayVideos() {
	VIDEO_LIST=$(echo "$1" | cut -b $(calc $ID_LENGTH+2)- | nl -n ln -b a)
	VIDEO_COUNT=$(echo "$VIDEO_LIST" | wc -l)
	if [[ "$VIDEO_COUNT" -gt $PAGE_LENGTH ]]
	then
		echo "There seem to be more than $PAGE_LENGTH videos on the list (specifically $VIDEO_COUNT). There are 4 possible things you can do in this situation:"
		echo "(1): Just print out the list like normal"
		echo "(2): Pipe the list through less"
		echo "(3): Print out a $PAGE_LENGTH video section of the list"
		echo "(4): Just don't print out the list at all."
		read OPTION
		case "$OPTION" in
			1)
				echo "$VIDEO_LIST"
				;;
			2)
				echo "$VIDEO_LIST" | less
				;;
			3)
				while :
				do
					PAGE_COUNT=$(calc $VIDEO_COUNT/$PAGE_LENGTH | sed -E "s/\.[0-9]*$//g")
					echo "Enter in the page that you want to go to (0-$(calc $PAGE_COUNT)), q to stop displaying videos."
					read PAGE_SELECTION
					if [[ "$PAGE_SELECTION" == "q" ]]
					then
						break
					else
						BOTTOM_PAGE=$(calc $PAGE_SELECTION*$PAGE_LENGTH)
						TOP_PAGE=$(calc $PAGE_SELECTION*$PAGE_LENGTH+$PAGE_LENGTH)
						echo "$VIDEO_LIST" | awk "NR > $BOTTOM_PAGE && NR <= $TOP_PAGE { print }"
						#https://stackoverflow.com/questions/6491532/how-to-subset-a-file-select-a-numbers-of-rows-or-columns
						#I should really learn awk.
					fi
				done
				;;
			4)
				echo "Not printing list."
				;;
		esac
	else
		echo "$VIDEO_LIST"
	fi
}

sanitizeSearch() {
	echo "$1" | sed "s/ /+/g"
}

URL="N/A"
VIDEOS="N/A"
SUBSCRIPTIONS=""
FILE="$HOME/.cache/tytc/subscriptions"
if [ -f "$FILE" ]
then
	SUBSCRIPTIONS=$(cat "$FILE")
fi

trap end INT

end() {
	mkdir -p $(dirname "$FILE")
	rm "$FILE"
	echo "$SUBSCRIPTIONS" >> "$FILE"
	exit
}

for ARG in "$@"
do
	if [ "$ARG" == "-h" ] || [ "$ARG" == "--help" ]
	then
		echo "Usage: tytc [subscription file]"
		echo "The subscription just contains the channels you're subscribed to."
		echo "The default subscription file is ~/.cache/tytc/subscriptions"
		echo "For specific commands, run the program and press ?"
		exit
	fi
done

while :
do
	echo "Enter in the next action (? for help)"
	read ACTION

	case "$ACTION" in
		\?)
			echo "Commands:"
			echo "?     Show this screen"
			echo "h     Go to the youtube homepage"
			echo "u     Select a video to view based on a url"
			echo "s     Select a video to view based on its index"
			echo "/     Search on youtube. You can use either / as a single command and"
			echo "      enter the query on the next line, or do /<query>"
			echo "d     Display the current URL and suggested videos"
			echo "p     Play the current video"
			echo "vc    View the thumbnail of the current video"
			echo "vs    View the thumbnail of a suggested video"
			echo "c     See information on the channel of the video"
			echo "cc    Go to the channel of the video"
			echo "o     Set a subscriptions file"
			echo "or    Open a subscriptions file and replace the current subscriptions."
			echo "sa    Add the current channel to the subscriptions"
			echo "sv    View the subscriptions"
			echo "ss    Select a subscribed channel to go to"
			echo "su    Unsubscribe to a channel"
			echo "r     refresh the page"
			echo "q     Quit the program"
			;;
		h)
			URL="https://www.youtube.com/"
			HTML=$(curl -s -A "$USER_AGENT" "$URL")
			VIDEOS=$(getData "$URL")
			;;
		u)
			echo "Enter in the youtube video to go to"
			read URL
			HTML=$(curl -s -A "$USER_AGENT" "$URL")
			VIDEOS=$(getData "$URL")
			;;
		s)
			displayVideos "$VIDEOS"
			echo "Enter in the video to go to."
			LINE=$(selectItem "$VIDEOS")
			if [[ -z "$LINE" ]]
			then
				echo "The input was not a number."
			else
				ID=$(echo "$LINE" | cut -b 1-$ID_LENGTH)
				URL=$(urlFromId "$ID")
				HTML=$(curl -s -A "$USER_AGENT" "$URL")
				VIDEOS=$(getData "$URL")
			fi
			;;
		/*?)
			if [[ ACTION == "/" ]]
			then
				echo "Enter the search query"
				read QUERY
			else
				QUERY=$(echo "$ACTION" | cut -b 2-)
			fi

			QUERY=$(sanitizeSearch "$QUERY")
			URL="https://www.youtube.com/results?search_query=$QUERY"
			HTML=$(curl -s -A "$USER_AGENT" "$URL")
			VIDEOS=$(getData "$URL")
			;;
		d)
			echo "You are on this page: $URL"
			echo "Suggested videos:"
			displayVideos "$VIDEOS"
			;;
		p)
			viewVideo "$URL"
			;;
		vc)
			viewThumbnail "$(echo "$URL" | cut -b 33-)"
			;;
		vs)
			displayVideos "$VIDEOS"
			echo "Enter in the video to view the thumbnail of"
			read LINE
			viewThumbnail "$(echo "$VIDEOS" | cut -b 1-$ID_LENGTH | sed "${LINE}q;d")"
			;;
		c)
			CHANNEL_DATA=$(getChannelCreator "$URL")
			CHANNEL_ID=$(echo "$CHANNEL_DATA" | cut -b 1-$CHANNEL_ID_LENGTH)
			CHANNEL_NAME=$(echo "$CHANNEL_DATA" | cut -b $(calc $CHANNEL_ID_LENGTH+1)-)
			echo "Channel id: $CHANNEL_ID"
			echo "Channel name: $CHANNEL_NAME"
			;;
		cc)
			CHANNEL_DATA=$(getChannelCreator "$URL")
			CHANNEL_ID=$(echo "$CHANNEL_DATA" | cut -b 1-$CHANNEL_ID_LENGTH)
			URL=$(urlFromChannelId "$CHANNEL_ID")
			VIDEOS=$(getData "$URL")
			;;
		o)
			read FILE
			;;
		or)
			read FILE
			echo ""
			SUBSCRIPTIONS=$(cat "$FILE")
			;;
		sa)
			CHANNEL_DATA=$(getChannelCreator "$URL")
			SUBSCRIPTIONS=$(echo -e "$SUBSCRIPTIONS\n$CHANNEL_DATA" | uniq | awk "NF")
			echo "You are now subscribed to $(echo "$CHANNEL_DATA" | cut -b $(calc $CHANNEL_ID_LENGTH+1)-)"
			;;
		sv)
			echo "You are subscribed to:"
			echo "$SUBSCRIPTIONS" | cut -b $(calc $CHANNEL_ID_LENGTH+1)-
			;;
		ss)
			echo "Please select a channel to go to"
			echo "$SUBSCRIPTIONS" | cut -b $(calc $CHANNEL_ID_LENGTH+1)- | nl -n ln -b a
			LINE=$(selectItem "$(echo "$SUBSCRIPTIONS" | cut -b 1-$CHANNEL_ID_LENGTH)")
			URL=$(urlFromChannelId $LINE)
			VIDEOS=$(getData "$URL")
			;;
		su)
			echo "Please select a channel to unsubscribe from"
			echo "$SUBSCRIPTIONS" | cut -b $(calc $CHANNEL_ID_LENGTH+1)- | nl -n ln -b a
			read LINE
			SUBSCRIPTIONS=$(echo "$SUBSCRIPTIONS" | awk "NR != $LINE")
			;;
		r)
			CHANNEL_DATA=$(getChannelCreator "$URL")
			CHANNEL_ID=$(echo "$CHANNEL_DATA" | cut -b 1-$CHANNEL_ID_LENGTH)
			VIDEOS=$(getData "$URL")
			;;
		q)
			end
			;;
		*)
			echo "Invalid command. Type ? for help."
			;;
	esac
done
